# Copyright (c) 2013 Shotgun Software Inc.
#
# CONFIDENTIAL AND PROPRIETARY
#
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights
# not expressly granted therein are reserved by Shotgun Software Inc.

from tank import Hook
import ix
import os


__author__ = "Diego Garcia Huerta"
__email__ = "diegogh2000@gmail.com"


class BreakdownSceneOperations(Hook):
    """
    Breakdown operations for Clarisse.

    This implementation handles detection of clarisse file geomatric, 
    alembic and texture nodes.
    """

    def scan_scene(self):
        """
        The scan scene method is executed once at startup and its purpose is
        to analyze the current scene and return a list of references that are
        to be potentially operated on.

        The return data structure is a list of dictionaries. Each scene 
        reference that is returned should be represented by a dictionary with 
        three keys:

        - "attr": The filename attribute of the 'node' that is to be operated
           on. Most DCCs have a concept of a node, attribute, path or some other
           way to address a particular object in the scene.
        - "type": The object type that this is. This is later passed to the
           update method so that it knows how to handle the object.
        - "path": Path on disk to the referenced object.

        Toolkit will scan the list of items, see if any of the objects matches
        any templates and try to determine if there is a more recent version
        available. Any such versions are then displayed in the UI as out of 
        date.
        """

        # These classes contain a filename propertym which could contain
        # publishedFiles and could count as dependencies.
        #
        # This link has got a way to get these types dynamically
        # but it briefly changes the state of the scene.
        # https://forum.isotropix.com/viewtopic.php?p=14779

        refs = []

        types = (
            "GeometryPolyfile",
            "GeometryVolumeFile",
            "GeometryBundleAlembic",
            "ProcessAlembicExport",
            "TextureMapFile",
            "TextureStreamedMapFile",
            "TextureOslFile",
        )

        for type_ in types:
            objects = ix.api.OfObjectVector()
            ix.application.get_matching_objects(objects, "*", type_)
            for object in objects:
                attr = object.get_attribute("filename")
                if attr:
                    ref_path = attr.get_string()
                    ref_path = ref_path.replace("/", os.path.sep)
                    refs.append(
                        {"attr": attr, "type": "file", "path": ref_path}
                    )
        return refs

    def update(self, items):
        """
        Perform replacements given a number of scene items passed from the app.

        Once a selection has been performed in the main UI and the user clicks
        the update button, this method is called.

        The items parameter is a list of dictionaries on the same form as was
        generated by the scan_scene hook above. The path key now holds
        the that each attribute should be updated *to* rather than the current
        path.
        """

        engine = self.parent.engine

        for i in items:

            attr = i["attr"]
            node_type = i["type"]
            new_path = i["path"]

            if node_type == "file":
                engine.log_debug(
                    "File %s: Updating to version %s" % (attr, new_path)
                )
                attr.set_string(new_path)
